------------------  C# -----------------------------------------------------------
https://github.com/Shome234/codeparctice24FromWork

----------------------------------------------------------------------------------
                     TRESURE MINE
----------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
 
public class Program	
{
    // ProductDetails dictionary to store product details (item name, quantity)
    public static Dictionary<string, int> ProductDetails = new Dictionary<string, int>();
 
    public void AddProductDetails(string itemName, int quantity)//method starting
    {
        // Add product details into the ProductDetails dictionary
              if(ProductDetails.ContainsKey(itemName))
              {
                  ProductDetails[itemName]+=quantity;
              }
              else{ProductDetails.Add(itemName,quantity);}
    }
 
    public List<string> CheckReorderLevel(int reorderLevel)
    {
        // Find items that have less stock than the reorder level
 
       List<string>a=new List<string>();
       foreach(var i in ProductDetails)
       {
           if(i.Value < reorderLevel)
           {
               a.Add(i.Key);
           }
       }
       return a;
    }//end of the methods
    public static void Main(string[] args)
    {
        Program storeProgram = new Program();
 
        Console.WriteLine("Enter the number of products");
        int numProducts = Convert.ToInt32(Console.ReadLine());
 
        // Get product details from the user
        for (int i = 0; i < numProducts; i++)
        {
            Console.WriteLine("Enter the item name");
            string itemName = Console.ReadLine();
 
            Console.WriteLine("Enter the stock quantity");
            int quantity = Convert.ToInt32(Console.ReadLine());
 
            // Call AddProductDetails method
            storeProgram.AddProductDetails(itemName, quantity);
        }
 
        Console.WriteLine("Enter re-order level");
        int reorderLevel = Convert.ToInt32(Console.ReadLine());
 
        // Call CheckReorderLevel method and display the result
        List<string> itemsToReorder = storeProgram.CheckReorderLevel(reorderLevel);
        if (itemsToReorder.Count > 0)
        {
            Console.WriteLine("List of Products - reorder level below " + reorderLevel);
            foreach (string item in itemsToReorder)
            {
                Console.WriteLine(item);
            }
        }
        else
        {
            Console.WriteLine("No need for reorder");
        }
    }
}


---------------------------------------------------------------------------------------------------------


---------------------------------------------------------------------------------------------------------
                               WIN CINEMAS
---------------------------------------------------------------------------------------------------------

using System;
using System.Collections.Generic;
using System.Linq;
using System.Text;
using System.Threading.Tasks;
public class Movie
{
	public string MovieName { get; set; }
	public string ScreenedDate { get; set; }
	public string RemovedDate { get; set; }
	public double Price { get; set; }
}

public class Program
{
	public static Dictionary<int, Movie> screeningDetails = new Dictionary<int, Movie>();
	public Dictionary<string, double> MovieScreenedMoreNumberOfDays() //method starting
	{
    	Dictionary<string, double> result = new Dictionary<string, double>();
    	double maxScreenDays = 0;
    	foreach (var movieEntry in screeningDetails)
    	{
        	DateTime screenedDate = DateTime.Parse(movieEntry.Value.ScreenedDate);
        	DateTime removedDate = DateTime.Parse(movieEntry.Value.RemovedDate);
        	double screenedDays = (removedDate - screenedDate).TotalDays;
        	if (screenedDays > maxScreenDays)
        	{
            	maxScreenDays = screenedDays;
            	result.Clear();
                result.Add(movieEntry.Value.MovieName, movieEntry.Value.Price);
        	}
        	else if (screenedDays == maxScreenDays)
        	{
                result.Add(movieEntry.Value.MovieName, movieEntry.Value.Price);
        	}
    	}
    	return result;
	}
	public Dictionary<string, double> MovieWithScreenedDays()
	{
    	Dictionary<string, double> result = new Dictionary<string, double>();
    	foreach (var movieEntry in screeningDetails)
    	{
        	DateTime screenedDate = DateTime.Parse(movieEntry.Value.ScreenedDate);
        	DateTime removedDate = DateTime.Parse(movieEntry.Value.RemovedDate);
  	      double screenedDays = (removedDate - screenedDate).TotalDays;
            result.Add(movieEntry.Value.MovieName, screenedDays);
    	}
    	return result;
	} //end of all methods
	static void Main()
	{
    	Program pr = new Program();
    	screeningDetails.Add(1, new Movie { MovieName = "Eternals", ScreenedDate = "04/25/2020", RemovedDate = "05/30/2020", Price = 350 });
    	screeningDetails.Add(2, new Movie { MovieName = "Iron Man", ScreenedDate = "07/15/2008", RemovedDate = "08/15/2008", Price = 1350 });
    	screeningDetails.Add(3, new Movie { MovieName = "Avatar", ScreenedDate = "10/15/2003", RemovedDate = "02/05/2004", Price = 3500 });
    	screeningDetails.Add(4, new Movie { MovieName = "Light Year", ScreenedDate = "05/17/2020", RemovedDate = "07/03/2020", Price = 6350 });
    	while (true)
    	{
        	Console.WriteLine("1. Movie Screening More number of days");
        	Console.WriteLine("2. Movie with their Screening Days");
        	Console.WriteLine("3. Exit");
        	Console.WriteLine("Enter your choice");
        	int choice = int.Parse(Console.ReadLine());
        	switch (choice)
        	{
            	case 1:
                	Dictionary<string, double> mydict1 = pr.MovieScreenedMoreNumberOfDays();
                	foreach (var item1 in mydict1)
                	{
                    	Console.WriteLine($"{item1.Key} {item1.Value}");
                	}
                	break;
            	case 2:
                	Dictionary<string, double> mydict2 = pr.MovieWithScreenedDays();
                	foreach (var item2 in mydict2)
                	{
                    	Console.WriteLine($"{item2.Key} {item2.Value}");
                	}
                	break;
            	case 3:
                	Console.WriteLine("Thank you");
                	return;
        	}
    	}
	}
}





-----—--------------------------------------------------------—------------------------------------
Chicago flights:------

select Flight_name,Flight_source 
from Flight_details
where Flight_destination in(select Flight_destination 
from Flight_details 
where Flight_destination<>"Chicago"
group by Flight_destination 
having count(distinct Flight_name)>1)
order by Flight_destination,Flight_name asc;
---------------------------------------------------------------------------------------------------------------
Code for Rides:------

select concat(left(sailor_name,3),left(boat_name,3))
as Ride_code
from sailor_details sd
join Ride_Details rd
on sd.sailor_id=rd.sailor_id
join Boat_details bd
on rd.boat_id=bd.boat_id
order by Ride_code desc;

-----------------------------------------------------------
Code for Rides ---

SELECT CONCAT(SUBSTR(S.SAILOR_NAME,1,3),SUBSTR(B.BOAT_NAME,1,3))
AS RIDE_CODE
FROM
RIDE_DETAILS R
JOIN
SAILOR_DETAILS S ON
R.SAILOR_ID=S.SAILOR_ID
JOIN
BOAT_DETAILS B ON R.BOAT_ID=B.BOAT_ID
ORDER BY RIDE_CODE DESC;

-----------------------------------------------------------------------------------------------------------------------------
                                                        fragrant fantasy
------------------------------------------------------------------------------------------------------------------------------
public class Perfume
{
    public string Type { get; set; }
    public int QuantitySold { get; set; }
}

public class Program
{
    public static Dictionary<int, Perfume> PerfumeDetails = new Dictionary<int, Perfume>();

    public static void Main()
    {
        PerfumeUtility utility = new PerfumeUtility();
        bool exit = false;

        while (!exit)
        {
            Console.WriteLine("1. Add perfume details");
            Console.WriteLine("2. Find maximum sold perfume");
            Console.WriteLine("3. Sort by quantity sold");
            Console.WriteLine("4. Exit");
            Console.WriteLine("Enter your choice");

            int choice = Convert.ToInt36(Console.ReadLine());

            switch (choice)
            {
                case 1:
                    Console.WriteLine("Enter the perfume type");
                    string type = Console.ReadLine();
                    Console.WriteLine("Enter the quantity sold");
                    int quantity = Convert.ToInt32(Console.ReadLine());
                    utility.AddPerfumeDetails(type, quantity);
                    break;
                case 2:
                    Console.WriteLine(utility.FindMaximumSoldPerfume());
                    break;
                case 3:
                    var sortedPerfumes = utility.SortByQuantitySold();
                    foreach (var perfume in sortedPerfumes)
                    {
                        Console.WriteLine($"{perfume.Key}\t{perfume.Value}");
                    }
                    break;
                case 4:
                    exit = true;
                    break;
                default:
                    Console.WriteLine("Invalid choice");
                    break;
            }
        }

        Console.WriteLine("Thank you");
    }
}

public class PerfumeUtility
{
    public Dictionary<int, Perfume> PerfumeDetails = Program.PerfumeDetails;

    public void AddPerfumeDetails(string type, int quantity)
    {
        PerfumeDetails.Add(Program.PerfumeDetails.Count + 1, new Perfume { Type = type, QuantitySold = quantity });
        Console.WriteLine("Inserted successfully");
    }

    public string FindMaximumSoldPerfume()
    {
        int maxQuantity = 0;
        string maxSoldPerfume = "";
        foreach (var perfume in PerfumeDetails)
        {
            if (perfume.Value.QuantitySold > maxQuantity)
            {
                maxQuantity = perfume.Value.QuantitySold;
                maxSoldPerfume = perfume.Value.Type;
            }
        }
        return maxSoldPerfume;
    }

    public Dictionary<string, int> SortByQuantitySold()
    {
        var sortedPerfumes = PerfumeDetails.OrderByDescending(x => x.Value.QuantitySold).ToDictionary(x => x.Value.Type, x => x.Value.QuantitySold);
        return sortedPerfumes;
    }
}
// https://github.com/Shome234/codeparctice24FromWork


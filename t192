--------------------------//https://github.com/Shome234/codeparctice24FromWork
---------------------------------------------------Win Cinemas----------------------------------------------------------------------------
        
using System;
using System.Collections.Generic;
using System.Linq;

public class Movie
{
    public string MovieName{get;set;}
    public string ScreenedDate{get;set;}
    public string RemovedDate{get;set;}
    public double Price{get;set;}
}
public class Program
{
    public static Dictionary<int,Movie> screeningDetails=new Dictionary<int,Movie>();
    public Dictionary<string,double> MovieScreenedMoreNumberOfDays()
    {
        return screeningDetails.Values.Select(item=>new{
            item.MovieName,
            ScreenDays=((DateTime.Parse(item.RemovedDate))-(DateTime.Parse(item.ScreenedDate))).TotalDays,
            item.Price
        }).GroupBy(x=>x.ScreenDays).OrderByDescending(g=>g.Key).First().ToDictionary(y=>y.MovieName,y=>y.Price);
        
    }
    public Dictionary<string,double> MovieWithScreenedDays(){
        return screeningDetails.Values.GroupBy(item=>item.MovieName).ToDictionary(g=>g.Key,g=>g.Sum(item=>((DateTime.Parse(item.RemovedDate))-(DateTime.Parse(item.ScreenedDate))).TotalDays));
        
    }
    public static void Main()
	{
    	Program pr = new Program();
    	screeningDetails.Add(1, new Movie { MovieName = "Eternals", ScreenedDate = "04/25/2020", RemovedDate = "05/30/2020", Price = 350 });
    	screeningDetails.Add(2, new Movie { MovieName = "Iron Man", ScreenedDate = "07/15/2008", RemovedDate = "08/15/2008", Price = 1350 });
    	screeningDetails.Add(3, new Movie { MovieName = "Avatar", ScreenedDate = "10/15/2003", RemovedDate = "02/05/2004", Price = 3500 });
    	screeningDetails.Add(4, new Movie { MovieName = "Light Year", ScreenedDate = "05/17/2020", RemovedDate = "07/03/2020", Price = 6350 });
    	while (true)
    	{
        	Console.WriteLine("1. Movie Screening More number of days");
        	Console.WriteLine("2. Movie with their Screening Days");
        	Console.WriteLine("3. Exit");
        	Console.WriteLine("Enter your choice");
        	int choice = int.Parse(Console.ReadLine());
        	switch (choice)
        	{
            	case 1:
                	Dictionary<string, double> mydict1 = pr.MovieScreenedMoreNumberOfDays();
                	foreach (var item1 in mydict1)
                	{
                    	Console.WriteLine($"{item1.Key} {item1.Value}");
                	}
                	break;
            	case 2:
                	Dictionary<string, double> mydict2 = pr.MovieWithScreenedDays();
                	foreach (var item2 in mydict2)
                	{
                    	Console.WriteLine($"{item2.Key} {item2.Value}");
                	}
                	break;
            	case 3:
                	Console.WriteLine("Thank you");
                	return;
        	}
    	}
	}

----------------------------------------------------------------------------Treasure Mine----------------------------------------------------------------------------
    
using System;
using System.Collections.Generic;
using System.Linq;

class Program
{
    public static Dictionary<string,int> ProductDetails=new Dictionary<string,int>();
    public void AddProductDetails(string itemName,int quantity)
    {
        if(ProductDetails.ContainsKey(itemName))
        {
            ProductDetails[itemName]+=quantity;
        }
        ProductDetails.Add(itemName,quantity);
    }
    public List<string> CheckReorderLevel(int reorderLevel)
    {
        return ProductDetails.Where(i=>i.Value<reorderLevel).Select(i=>i.Key).ToList();
    }
    public static void Main(string[] args)
    {
        Program storeProgram = new Program();
 
        Console.WriteLine("Enter the number of products");
        int numProducts = Convert.ToInt32(Console.ReadLine());
 
        // Get product details from the user
        for (int i = 0; i < numProducts; i++)
        {
            Console.WriteLine("Enter the item name");
            string itemName = Console.ReadLine();
 
            Console.WriteLine("Enter the stock quantity");
            int quantity = Convert.ToInt32(Console.ReadLine());
 
            // Call AddProductDetails method
            storeProgram.AddProductDetails(itemName, quantity);
        }
 
        Console.WriteLine("Enter re-order level");
        int reorderLevel = Convert.ToInt32(Console.ReadLine());
 
        // Call CheckReorderLevel method and display the result
        List<string> itemsToReorder = storeProgram.CheckReorderLevel(reorderLevel);
        if (itemsToReorder.Count > 0)
        {
            Console.WriteLine("List of Products - reorder level below " + reorderLevel);
            foreach (string item in itemsToReorder)
            {
                Console.WriteLine(item);
            }
        }
        else
        {
            Console.WriteLine("No need for reorder");
        }
    }
}

----------------------------------------------------------------------------------------------------------------------â€”---------------------------------------------
Chicago flights:------

select Flight_name,Flight_source 
from Flight_details
where Flight_destination in(select Flight_destination 
from Flight_details 
where Flight_destination<>"Chicago"
group by Flight_destination 
having count(distinct Flight_name)>1)
order by Flight_destination,Flight_name asc;

--------------------------------------------------------------------------------------------------------------------------------------------------------------------
Code for Rides:------

select concat(left(sailor_name,3),left(boat_name,3))
as Ride_code
from sailor_details sd
join Ride_Details rd
on sd.sailor_id=rd.sailor_id
join Boat_details bd
on rd.boat_id=bd.boat_id
order by Ride_code desc;
----------------------------------------------------
using System;
using System.Collections.Generic;
using System.Linq;

public class Perfume{
    public string Type{get;set;}
    public int QuantitySold{get;set;}
}
public class Program{
    public static Dictionary<int,Perfume> PerfumeDetails{get;set;}=new Dictionary<int,Perfume>();

    public static void Main()
    {
        PerfumeUtility utility = new PerfumeUtility();
        bool exit = false;

        while (!exit)
        {
            Console.WriteLine("1. Add perfume details");
            Console.WriteLine("2. Find maximum sold perfume");
            Console.WriteLine("3. Sort by quantity sold");
            Console.WriteLine("4. Exit");
            Console.WriteLine("Enter your choice");

            int choice = Convert.ToInt32(Console.ReadLine());

            switch (choice)
            {
                case 1:
                    Console.WriteLine("Enter the perfume type");
                    string type = Console.ReadLine();
                    Console.WriteLine("Enter the quantity sold");
                    int quantity = Convert.ToInt32(Console.ReadLine());
                    utility.AddPerfumeDetails(type, quantity);
                    break;
                case 2:
                    Console.WriteLine(utility.FindMaximumSoldPerfume());
                    break;
                case 3:
                    var sortedPerfumes = utility.SortByQuantitySold();
                    foreach (var perfume in sortedPerfumes)
                    {
                        Console.WriteLine($"{perfume.Key}\t{perfume.Value}");
                    }
                    break;
                case 4:
                    exit = true;
                    break;
                default:
                    Console.WriteLine("Invalid choice");
                    break;
            }
        }

        Console.WriteLine("Thank you");
    }
}
public class PerfumeUtility{
    public void AddPerfumeDetails(string type,int quantity){
        Program.PerfumeDetails.Add(Program.PerfumeDetails.Count+1,new Perfume{Type=type,QuantitySold=quantity});
    }
    public string FindMaximumSoldPerfume(){
        var r= Program.PerfumeDetails.Values.Max(i=>i.QuantitySold);
        // string s="";
        foreach(var i in Program.PerfumeDetails.Values){
            if(i.QuantitySold==r){
                return i.Type;
            }
        }
        return null;
    }
    public Dictionary<string,int> SortByQuantitySold(){
        return Program.PerfumeDetails.Values.OrderByDescending(i=>i.QuantitySold).ToDictionary(g=>g.Type,g=>g.QuantitySold);
    }
}
}
